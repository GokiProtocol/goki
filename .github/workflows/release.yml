name: Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - "v*.*.*"

env:
  CARGO_TERM_COLOR: always
  NPM_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

jobs:
  release-sdk:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix shell .#env-anchor-idls --command bash {0}

    name: Release SDK on NPM
    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v17
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: quarry, saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Yarn Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Install Yarn dependencies
        run: yarn install
      - name: Parse IDLs
        run: yarn idl:generate
      - run: yarn build
      - run: |
          echo 'npmAuthToken: "${NPM_AUTH_TOKEN}"' >> .yarnrc.yml
      - name: Publish
        run: yarn npm publish

  release-crate:
    runs-on: ubuntu-latest
    name: Release crate on crates.io
    defaults:
      run:
        shell: nix shell .#env-release-crates --command bash {0}

    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v17
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: quarry, saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - uses: Swatinem/rust-cache@v1
      - name: Publish crates
        run: cargo workspaces publish --from-git --yes --skip-published --token ${{ secrets.CARGO_PUBLISH_TOKEN }}

  release-binaries:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix shell .#env-anchor-build --command bash {0}

    name: Release verifiable binaries
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: quarry, saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build programs
        run: anchor build --verifiable
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/deploy/*
            target/idl/*
            target/verifiable/*

  site:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix shell .#env-anchor-idls --command bash {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v17
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: quarry, saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Yarn Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Install Yarn dependencies
        run: yarn install
      - name: Parse IDLs
        run: yarn idl:generate
      - run: yarn docs:generate
      - run: cp -R images/ site/

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          branch: gh-pages
          folder: site
