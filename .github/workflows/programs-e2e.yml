name: E2E

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  SOLANA_VERSION: "1.8.11"
  RUST_TOOLCHAIN: "1.58.0"
  PROGRAM_PATH: "programs/smart-wallet/"

jobs:
  sdk:
    runs-on: ubuntu-latest
    name: Build the SDK
    steps:
      - uses: actions/checkout@v2

      - uses: cachix/install-nix-action@v16
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: quarry, saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Parse IDLs
        run: nix shell .#ci --command ./scripts/parse-idls.sh

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          always-auth: true
          node-version: "16"
      - name: Yarn Cache
        uses: actions/cache@v2
        with:
          path: ./.yarn
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install Yarn dependencies
        run: yarn install
      - run: ./scripts/generate-idl-types.sh
      - run: yarn build
      - run: yarn typecheck
      - run: yarn lint

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Setup Nix
      - uses: cachix/install-nix-action@v16
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: quarry, saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      # Install Rust and Anchor
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - uses: Swatinem/rust-cache@v1
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      # Install Solana
      - name: Cache Solana binaries
        id: solana-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/solana
            ~/.local/share/solana/install
          key: ${{ runner.os }}-${{ env.SOLANA_VERSION }}
      - name: Install Solana
        if: steps.solana-cache.outputs.cache-hit != 'true'
        run: |
          nix shell .#ci --command solana-install init ${{ env.SOLANA_VERSION }}
      - name: Setup Solana Path
        run: |
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      # Run build
      - name: Build program
        run: nix shell .#ci --command anchor build

      - name: Yarn Cache
        uses: actions/cache@v2
        with:
          path: ./.yarn
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - run: nix shell .#ci --command yarn install
      - name: Generate IDL types
        run: nix shell .#ci --command yarn idl:generate
      - run: yarn build
      - name: Run e2e tests
        run: nix shell .#ci --command yarn test:e2e

  soteria:
    name: Soteria Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout changes
        uses: actions/checkout@v2

      - name: Cache Solana Version
        uses: actions/cache@v2
        id: solana-cache
        with:
          path: |
            ~/.rustup
            ~/.cache/solana
            ~/.local/share/solana
          key: solana-${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Cache Soteria Build
        uses: Swatinem/rust-cache@v1
        with:
          target-dir: ${{ env.PROGRAM_PATH }}.coderrect/build # Cache build files for performance

      # Install Cachix
      - uses: cachix/install-nix-action@v16
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: goki
          extraPullNames: saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      # Install Solana
      - name: Install Solana
        if: steps.solana-cache.outputs.cache-hit != 'true'
        run: |
          nix shell .#ci --command solana-install init ${{ env.SOLANA_VERSION }}
      - name: Setup Solana Path
        run: |
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
          solana --version
          echo Configuring bpf toolchain...
          (cd /home/runner/.local/share/solana/install/active_release/bin/sdk/bpf/scripts; ./install.sh)
      - name: Download Soteria # Always grab the latest version
        run: |
          echo Downloading Soteria... ðŸ”¬
          sh -c "$(curl -k https://supercompiler.xyz/install)"
          export PATH=$PWD/soteria-linux-develop/bin/:$PATH
          echo "$PWD/soteria-linux-develop/bin" >> $GITHUB_PATH
        shell: bash

      - name: Run Soteria
        run: |
          echo Running Soteria...
          cd ${{ env.PROGRAM_PATH }}
          soteria -analyzeAll .
        shell: bash
